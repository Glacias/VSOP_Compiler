
# parsetabExt.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocif_thenlet_precnonassocelsewhile_preclet_prec_assignrightassignleftandorxorrightnotnonassoclowerlargerlower_equallarger_equalequalleftplusminuslefttimesdivmodulononassocplusplusminusminusrightuminusisnullrightpowleftdotand assign bool class colon comma div do dot double_colon else equal extends external false if in int32 integer_literal isnull larger larger_equal lbrace let lower lower_equal lpar minus minusminus modulo new not object_identifier or plus plusplus pow rbrace rpar semicolon string string_literal then times true type_identifier unit while xorProgram : Class\n                   | Program ClassProgram : External_met\n                   | Program External_metClass_body :\n                      | Class_body Field\n                      | Class_body MethodClass : class type_identifier lbrace Class_body rbrace\n                 | class type_identifier extends type_identifier lbrace Class_body rbraceClass : class type_identifier lbrace error rbrace\n                 | class type_identifier extends type_identifier lbrace error rbraceClass : class lbrace Class_body rbrace\n                 | class extends type_identifier lbrace Class_body rbraceClass : class object_identifier lbrace error rbrace\n                 | class object_identifier extends type_identifier lbrace Class_body rbraceClass : class type_identifier extends object_identifier lbrace Class_body rbraceExternal_met : external object_identifier lpar Formals rpar colon Type semicolonField : object_identifier colon Type semicolon\n                 | object_identifier colon Type assign Expr semicolonField : object_identifier colon Type\n                 | object_identifier colon Type assign ExprField : object_identifier semicolon\n                 | object_identifier assign Expr semicolonMethod : object_identifier lpar Formals rpar colon Type BlockMethod : object_identifier lpar error rpar colon Type BlockType : type_identifier\n                | int32\n                | bool\n                | string\n                | unitFormals :\n                   | Formal\n                   | Formals comma FormalFormals : Formals FormalFormal : object_identifier colon TypeFormal : object_identifierBlock : lbrace Block_body rbraceBlock : lbrace error rbraceBlock : lbrace rbraceBlock : lbrace Block_body semicolon rbraceBlock_body : Expr\n                      | Block_body semicolon ExprBlock_body : Block_body ExprExpr : if Expr then Expr %prec if_then\n                | if Expr then Expr else ExprExpr : while Expr do Expr %prec while_precExpr : let object_identifier colon Type in Expr %prec let_prec\n                | let object_identifier colon Type assign Expr in Expr %prec let_prec_assignExpr : let object_identifier in Expr\n                | let object_identifier assign Expr in Expr Expr : object_identifier assign ExprExpr : minus Expr %prec uminusExpr : not Expr\n                | isnull Expr\n                | plusplus Expr\n                | minusminus ExprExpr : Expr plusplus\n                | Expr minusminusExpr : Expr and Expr\n                | Expr or Expr\n                | Expr xor Expr\n                | Expr equal Expr\n                | Expr lower Expr\n                | Expr larger Expr\n                | Expr lower_equal Expr\n                | Expr larger_equal Expr\n                | Expr plus Expr\n                | Expr minus Expr\n                | Expr times Expr\n                | Expr div Expr\n                | Expr modulo Expr\n                | Expr pow ExprExpr : object_identifier lpar Args rpar\n                | Expr dot object_identifier lpar Args rpar\n                | Expr double_colon type_identifier dot object_identifier lpar Args rparExpr : new type_identifierExpr : new object_identifierExpr : object_identifierExpr : LiteralExpr : lpar rparExpr : lpar Expr rparExpr : lpar error rparExpr : BlockArgs :\n                | Expr\n                | Args comma ExprLiteral : integer_literal\n                   | string_literal\n                   | Boolean_literalBoolean_literal : true\n                           | false'
    
_lr_action_items = {'class':([0,1,2,3,6,7,24,34,35,43,80,85,86,87,130,165,],[4,4,-1,-3,-2,-4,-12,-8,-10,-14,-13,-9,-11,-16,-15,-17,]),'external':([0,1,2,3,6,7,24,34,35,43,80,85,86,87,130,165,],[5,5,-1,-3,-2,-4,-12,-8,-10,-14,-13,-9,-11,-16,-15,-17,]),'$end':([1,2,3,6,7,24,34,35,43,80,85,86,87,130,165,],[0,-1,-3,-2,-4,-12,-8,-10,-14,-13,-9,-11,-16,-15,-17,]),'type_identifier':([4,10,14,18,38,45,69,83,110,154,163,164,],[8,16,22,30,53,53,122,53,151,53,53,53,]),'lbrace':([4,8,11,16,22,23,30,40,53,54,55,56,57,58,60,61,63,64,65,66,67,68,70,71,72,73,74,75,76,77,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,114,115,116,117,118,119,122,123,124,125,127,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,153,155,156,157,158,159,160,161,162,167,168,169,171,172,174,176,177,178,179,183,184,185,186,189,190,191,192,194,196,197,198,],[9,13,17,28,36,37,44,75,-26,-27,-28,-29,-30,-78,75,75,75,75,75,75,75,75,-79,-83,-87,-88,-89,75,-90,-91,75,75,75,-57,-58,75,75,75,75,75,75,75,75,75,75,75,75,75,75,-52,-53,-54,-55,-56,-80,-76,-77,75,-39,-41,-51,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,75,75,75,75,-81,-82,-37,75,-43,-38,-73,75,75,-44,-46,-49,-40,-42,75,75,75,75,75,75,-74,75,-45,-47,-50,75,-75,-48,]),'extends':([4,8,11,],[10,14,18,]),'object_identifier':([4,5,9,13,14,15,19,20,25,26,28,31,32,33,36,37,39,40,41,42,44,47,48,49,51,52,53,54,55,56,57,58,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,82,84,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,114,115,116,117,118,119,122,123,124,125,127,132,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,153,155,156,157,158,159,160,161,162,166,167,168,169,170,171,172,174,176,177,183,184,185,186,187,188,189,190,191,192,194,196,197,198,],[11,12,-5,-5,23,27,31,27,-6,-7,-5,-36,31,-32,-5,-5,-22,58,31,27,-5,31,-34,27,27,-20,-26,-27,-28,-29,-30,-78,58,58,113,58,58,58,58,58,58,123,-79,-83,-87,-88,-89,58,-90,-91,31,27,-35,-33,-18,58,58,58,-23,-57,-58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,150,-52,-53,-54,-55,-56,-80,-76,-77,58,-39,-41,-21,-51,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,58,58,58,58,-81,-82,-37,58,-43,-38,-19,-73,58,58,182,-44,-46,-49,-40,-42,58,58,58,58,-24,-25,-74,58,-45,-47,-50,58,-75,-48,]),'rbrace':([9,13,15,20,21,25,26,28,29,36,37,39,42,44,49,50,51,52,53,54,55,56,57,58,70,71,72,73,74,75,76,77,81,88,92,93,94,114,115,116,117,118,119,122,123,124,125,126,127,132,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,157,158,159,160,161,162,166,167,171,172,174,176,177,187,188,189,191,192,194,197,198,],[-5,-5,24,34,35,-6,-7,-5,43,-5,-5,-22,80,-5,85,86,87,-20,-26,-27,-28,-29,-30,-78,-79,-83,-87,-88,-89,125,-90,-91,130,-18,-23,-57,-58,-52,-53,-54,-55,-56,-80,-76,-77,159,-39,162,-41,-21,-51,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-81,-82,-37,176,-43,-38,-19,-73,-44,-46,-49,-40,-42,-24,-25,-74,-45,-47,-50,-75,-48,]),'lpar':([12,27,40,58,60,61,63,64,65,66,67,68,70,71,72,73,74,75,76,77,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,114,115,116,117,118,119,122,123,124,125,127,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,153,155,156,157,158,159,160,161,162,167,168,169,171,172,174,176,177,182,183,184,185,186,189,190,191,192,194,196,197,198,],[19,41,68,91,68,68,68,68,68,68,68,68,-79,-83,-87,-88,-89,68,-90,-91,68,68,68,-57,-58,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-52,-53,-54,-55,-56,-80,-76,-77,68,-39,-41,-51,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,169,68,68,68,68,-81,-82,-37,68,-43,-38,-73,68,68,-44,-46,-49,-40,-42,190,68,68,68,68,-74,68,-45,-47,-50,68,-75,-48,]),'error':([13,17,36,41,68,75,],[21,29,50,79,121,126,]),'rpar':([19,31,32,33,41,48,53,54,55,56,57,58,68,70,71,72,73,74,76,77,78,79,82,84,91,93,94,114,115,116,117,118,119,120,121,122,123,125,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,157,158,159,162,167,169,171,172,174,176,180,181,189,190,191,192,194,195,197,198,],[-31,-36,46,-32,-31,-34,-26,-27,-28,-29,-30,-78,119,-79,-83,-87,-88,-89,-90,-91,128,129,-35,-33,-84,-57,-58,-52,-53,-54,-55,-56,-80,157,158,-76,-77,-39,-51,167,-85,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-81,-82,-37,-38,-73,-84,-44,-46,-49,-40,-86,189,-74,-84,-45,-47,-50,197,-75,-48,]),'comma':([19,31,32,33,41,48,53,54,55,56,57,58,70,71,72,73,74,76,77,78,82,84,91,93,94,114,115,116,117,118,119,122,123,125,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,157,158,159,162,167,169,171,172,174,176,180,181,189,190,191,192,194,195,197,198,],[-31,-36,47,-32,-31,-34,-26,-27,-28,-29,-30,-78,-79,-83,-87,-88,-89,-90,-91,47,-35,-33,-84,-57,-58,-52,-53,-54,-55,-56,-80,-76,-77,-39,-51,168,-85,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-81,-82,-37,-38,-73,-84,-44,-46,-49,-40,-86,168,-74,-84,-45,-47,-50,168,-75,-48,]),'colon':([27,31,46,113,128,129,],[38,45,83,154,163,164,]),'semicolon':([27,52,53,54,55,56,57,58,59,70,71,72,73,74,76,77,93,94,114,115,116,117,118,119,122,123,124,125,127,131,132,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,157,158,159,161,162,167,171,172,174,176,177,189,191,192,194,197,198,],[39,88,-26,-27,-28,-29,-30,-78,92,-79,-83,-87,-88,-89,-90,-91,-57,-58,-52,-53,-54,-55,-56,-80,-76,-77,160,-39,-41,165,166,-51,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-81,-82,-37,-43,-38,-73,-44,-46,-49,-40,-42,-74,-45,-47,-50,-75,-48,]),'assign':([27,52,53,54,55,56,57,58,113,173,],[40,89,-26,-27,-28,-29,-30,90,156,185,]),'int32':([38,45,83,154,163,164,],[54,54,54,54,54,54,]),'bool':([38,45,83,154,163,164,],[55,55,55,55,55,55,]),'string':([38,45,83,154,163,164,],[56,56,56,56,56,56,]),'unit':([38,45,83,154,163,164,],[57,57,57,57,57,57,]),'if':([40,58,60,61,63,64,65,66,67,68,70,71,72,73,74,75,76,77,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,114,115,116,117,118,119,122,123,124,125,127,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,153,155,156,157,158,159,160,161,162,167,168,169,171,172,174,176,177,183,184,185,186,189,190,191,192,194,196,197,198,],[60,-78,60,60,60,60,60,60,60,60,-79,-83,-87,-88,-89,60,-90,-91,60,60,60,-57,-58,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-52,-53,-54,-55,-56,-80,-76,-77,60,-39,-41,-51,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,60,60,60,60,-81,-82,-37,60,-43,-38,-73,60,60,-44,-46,-49,-40,-42,60,60,60,60,-74,60,-45,-47,-50,60,-75,-48,]),'while':([40,58,60,61,63,64,65,66,67,68,70,71,72,73,74,75,76,77,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,114,115,116,117,118,119,122,123,124,125,127,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,153,155,156,157,158,159,160,161,162,167,168,169,171,172,174,176,177,183,184,185,186,189,190,191,192,194,196,197,198,],[61,-78,61,61,61,61,61,61,61,61,-79,-83,-87,-88,-89,61,-90,-91,61,61,61,-57,-58,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-52,-53,-54,-55,-56,-80,-76,-77,61,-39,-41,-51,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,61,61,61,61,-81,-82,-37,61,-43,-38,-73,61,61,-44,-46,-49,-40,-42,61,61,61,61,-74,61,-45,-47,-50,61,-75,-48,]),'let':([40,58,60,61,63,64,65,66,67,68,70,71,72,73,74,75,76,77,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,114,115,116,117,118,119,122,123,124,125,127,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,153,155,156,157,158,159,160,161,162,167,168,169,171,172,174,176,177,183,184,185,186,189,190,191,192,194,196,197,198,],[62,-78,62,62,62,62,62,62,62,62,-79,-83,-87,-88,-89,62,-90,-91,62,62,62,-57,-58,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-52,-53,-54,-55,-56,-80,-76,-77,62,-39,-41,-51,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,62,62,62,62,-81,-82,-37,62,-43,-38,-73,62,62,-44,-46,-49,-40,-42,62,62,62,62,-74,62,-45,-47,-50,62,-75,-48,]),'minus':([40,58,59,60,61,63,64,65,66,67,68,70,71,72,73,74,75,76,77,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,111,112,114,115,116,117,118,119,120,122,123,124,125,127,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,153,155,156,157,158,159,160,161,162,167,168,169,171,172,174,175,176,177,180,183,184,185,186,189,190,191,192,193,194,196,197,198,],[63,-78,104,63,63,63,63,63,63,63,63,-79,-83,-87,-88,-89,63,-90,-91,63,63,63,-57,-58,63,63,63,63,63,63,63,63,63,63,63,63,63,63,104,104,-52,104,-54,-55,-56,-80,104,-76,-77,63,-39,104,104,104,104,104,104,104,104,104,104,104,104,-67,-68,-69,-70,-71,-72,63,63,63,63,-81,-82,-37,63,104,-38,-73,63,63,104,104,104,104,-40,104,104,63,63,63,63,-74,63,104,104,104,104,63,-75,104,]),'not':([40,58,60,61,63,64,65,66,67,68,70,71,72,73,74,75,76,77,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,114,115,116,117,118,119,122,123,124,125,127,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,153,155,156,157,158,159,160,161,162,167,168,169,171,172,174,176,177,183,184,185,186,189,190,191,192,194,196,197,198,],[64,-78,64,64,64,64,64,64,64,64,-79,-83,-87,-88,-89,64,-90,-91,64,64,64,-57,-58,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-52,-53,-54,-55,-56,-80,-76,-77,64,-39,-41,-51,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,64,64,64,64,-81,-82,-37,64,-43,-38,-73,64,64,-44,-46,-49,-40,-42,64,64,64,64,-74,64,-45,-47,-50,64,-75,-48,]),'isnull':([40,58,60,61,63,64,65,66,67,68,70,71,72,73,74,75,76,77,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,114,115,116,117,118,119,122,123,124,125,127,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,153,155,156,157,158,159,160,161,162,167,168,169,171,172,174,176,177,183,184,185,186,189,190,191,192,194,196,197,198,],[65,-78,65,65,65,65,65,65,65,65,-79,-83,-87,-88,-89,65,-90,-91,65,65,65,-57,-58,65,65,65,65,65,65,65,65,65,65,65,65,65,65,-52,-53,-54,-55,-56,-80,-76,-77,65,-39,-41,-51,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,65,65,65,65,-81,-82,-37,65,-43,-38,-73,65,65,-44,-46,-49,-40,-42,65,65,65,65,-74,65,-45,-47,-50,65,-75,-48,]),'plusplus':([40,58,59,60,61,63,64,65,66,67,68,70,71,72,73,74,75,76,77,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,111,112,114,115,116,117,118,119,120,122,123,124,125,127,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,153,155,156,157,158,159,160,161,162,167,168,169,171,172,174,175,176,177,180,183,184,185,186,189,190,191,192,193,194,196,197,198,],[66,-78,93,66,66,66,66,66,66,66,66,-79,-83,-87,-88,-89,66,-90,-91,66,66,66,-57,-58,66,66,66,66,66,66,66,66,66,66,66,66,66,66,93,93,-52,93,-54,None,None,-80,93,-76,-77,66,-39,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,-72,66,66,66,66,-81,-82,-37,66,93,-38,-73,66,66,93,93,93,93,-40,93,93,66,66,66,66,-74,66,93,93,93,93,66,-75,93,]),'minusminus':([40,58,59,60,61,63,64,65,66,67,68,70,71,72,73,74,75,76,77,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,111,112,114,115,116,117,118,119,120,122,123,124,125,127,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,153,155,156,157,158,159,160,161,162,167,168,169,171,172,174,175,176,177,180,183,184,185,186,189,190,191,192,193,194,196,197,198,],[67,-78,94,67,67,67,67,67,67,67,67,-79,-83,-87,-88,-89,67,-90,-91,67,67,67,-57,-58,67,67,67,67,67,67,67,67,67,67,67,67,67,67,94,94,-52,94,-54,None,None,-80,94,-76,-77,67,-39,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,-72,67,67,67,67,-81,-82,-37,67,94,-38,-73,67,67,94,94,94,94,-40,94,94,67,67,67,67,-74,67,94,94,94,94,67,-75,94,]),'new':([40,58,60,61,63,64,65,66,67,68,70,71,72,73,74,75,76,77,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,114,115,116,117,118,119,122,123,124,125,127,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,153,155,156,157,158,159,160,161,162,167,168,169,171,172,174,176,177,183,184,185,186,189,190,191,192,194,196,197,198,],[69,-78,69,69,69,69,69,69,69,69,-79,-83,-87,-88,-89,69,-90,-91,69,69,69,-57,-58,69,69,69,69,69,69,69,69,69,69,69,69,69,69,-52,-53,-54,-55,-56,-80,-76,-77,69,-39,-41,-51,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,69,69,69,69,-81,-82,-37,69,-43,-38,-73,69,69,-44,-46,-49,-40,-42,69,69,69,69,-74,69,-45,-47,-50,69,-75,-48,]),'integer_literal':([40,58,60,61,63,64,65,66,67,68,70,71,72,73,74,75,76,77,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,114,115,116,117,118,119,122,123,124,125,127,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,153,155,156,157,158,159,160,161,162,167,168,169,171,172,174,176,177,183,184,185,186,189,190,191,192,194,196,197,198,],[72,-78,72,72,72,72,72,72,72,72,-79,-83,-87,-88,-89,72,-90,-91,72,72,72,-57,-58,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-52,-53,-54,-55,-56,-80,-76,-77,72,-39,-41,-51,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,72,72,72,72,-81,-82,-37,72,-43,-38,-73,72,72,-44,-46,-49,-40,-42,72,72,72,72,-74,72,-45,-47,-50,72,-75,-48,]),'string_literal':([40,58,60,61,63,64,65,66,67,68,70,71,72,73,74,75,76,77,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,114,115,116,117,118,119,122,123,124,125,127,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,153,155,156,157,158,159,160,161,162,167,168,169,171,172,174,176,177,183,184,185,186,189,190,191,192,194,196,197,198,],[73,-78,73,73,73,73,73,73,73,73,-79,-83,-87,-88,-89,73,-90,-91,73,73,73,-57,-58,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-52,-53,-54,-55,-56,-80,-76,-77,73,-39,-41,-51,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,73,73,73,73,-81,-82,-37,73,-43,-38,-73,73,73,-44,-46,-49,-40,-42,73,73,73,73,-74,73,-45,-47,-50,73,-75,-48,]),'true':([40,58,60,61,63,64,65,66,67,68,70,71,72,73,74,75,76,77,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,114,115,116,117,118,119,122,123,124,125,127,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,153,155,156,157,158,159,160,161,162,167,168,169,171,172,174,176,177,183,184,185,186,189,190,191,192,194,196,197,198,],[76,-78,76,76,76,76,76,76,76,76,-79,-83,-87,-88,-89,76,-90,-91,76,76,76,-57,-58,76,76,76,76,76,76,76,76,76,76,76,76,76,76,-52,-53,-54,-55,-56,-80,-76,-77,76,-39,-41,-51,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,76,76,76,76,-81,-82,-37,76,-43,-38,-73,76,76,-44,-46,-49,-40,-42,76,76,76,76,-74,76,-45,-47,-50,76,-75,-48,]),'false':([40,58,60,61,63,64,65,66,67,68,70,71,72,73,74,75,76,77,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,114,115,116,117,118,119,122,123,124,125,127,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,152,153,155,156,157,158,159,160,161,162,167,168,169,171,172,174,176,177,183,184,185,186,189,190,191,192,194,196,197,198,],[77,-78,77,77,77,77,77,77,77,77,-79,-83,-87,-88,-89,77,-90,-91,77,77,77,-57,-58,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-52,-53,-54,-55,-56,-80,-76,-77,77,-39,-41,-51,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,77,77,77,77,-81,-82,-37,77,-43,-38,-73,77,77,-44,-46,-49,-40,-42,77,77,77,77,-74,77,-45,-47,-50,77,-75,-48,]),'in':([53,54,55,56,57,58,70,71,72,73,74,76,77,93,94,113,114,115,116,117,118,119,122,123,125,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,157,158,159,162,167,171,172,173,174,175,176,189,191,192,193,194,197,198,],[-26,-27,-28,-29,-30,-78,-79,-83,-87,-88,-89,-90,-91,-57,-58,155,-52,-53,-54,-55,-56,-80,-76,-77,-39,-51,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-81,-82,-37,-38,-73,-44,-46,184,-49,186,-40,-74,-45,-47,196,-50,-75,-48,]),'and':([58,59,70,71,72,73,74,76,77,93,94,111,112,114,115,116,117,118,119,120,122,123,125,127,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,157,158,159,161,162,167,171,172,174,175,176,177,180,189,191,192,193,194,197,198,],[-78,95,-79,-83,-87,-88,-89,-90,-91,-57,-58,95,95,-52,-53,-54,-55,-56,-80,95,-76,-77,-39,95,95,95,95,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-81,-82,-37,95,-38,-73,95,95,95,95,-40,95,95,-74,95,95,95,95,-75,95,]),'or':([58,59,70,71,72,73,74,76,77,93,94,111,112,114,115,116,117,118,119,120,122,123,125,127,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,157,158,159,161,162,167,171,172,174,175,176,177,180,189,191,192,193,194,197,198,],[-78,96,-79,-83,-87,-88,-89,-90,-91,-57,-58,96,96,-52,-53,-54,-55,-56,-80,96,-76,-77,-39,96,96,96,96,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-81,-82,-37,96,-38,-73,96,96,96,96,-40,96,96,-74,96,96,96,96,-75,96,]),'xor':([58,59,70,71,72,73,74,76,77,93,94,111,112,114,115,116,117,118,119,120,122,123,125,127,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,157,158,159,161,162,167,171,172,174,175,176,177,180,189,191,192,193,194,197,198,],[-78,97,-79,-83,-87,-88,-89,-90,-91,-57,-58,97,97,-52,-53,-54,-55,-56,-80,97,-76,-77,-39,97,97,97,97,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-81,-82,-37,97,-38,-73,97,97,97,97,-40,97,97,-74,97,97,97,97,-75,97,]),'equal':([58,59,70,71,72,73,74,76,77,93,94,111,112,114,115,116,117,118,119,120,122,123,125,127,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,157,158,159,161,162,167,171,172,174,175,176,177,180,189,191,192,193,194,197,198,],[-78,98,-79,-83,-87,-88,-89,-90,-91,-57,-58,98,98,-52,98,-54,-55,-56,-80,98,-76,-77,-39,98,98,98,98,98,98,98,None,None,None,None,None,-67,-68,-69,-70,-71,-72,-81,-82,-37,98,-38,-73,98,98,98,98,-40,98,98,-74,98,98,98,98,-75,98,]),'lower':([58,59,70,71,72,73,74,76,77,93,94,111,112,114,115,116,117,118,119,120,122,123,125,127,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,157,158,159,161,162,167,171,172,174,175,176,177,180,189,191,192,193,194,197,198,],[-78,99,-79,-83,-87,-88,-89,-90,-91,-57,-58,99,99,-52,99,-54,-55,-56,-80,99,-76,-77,-39,99,99,99,99,99,99,99,None,None,None,None,None,-67,-68,-69,-70,-71,-72,-81,-82,-37,99,-38,-73,99,99,99,99,-40,99,99,-74,99,99,99,99,-75,99,]),'larger':([58,59,70,71,72,73,74,76,77,93,94,111,112,114,115,116,117,118,119,120,122,123,125,127,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,157,158,159,161,162,167,171,172,174,175,176,177,180,189,191,192,193,194,197,198,],[-78,100,-79,-83,-87,-88,-89,-90,-91,-57,-58,100,100,-52,100,-54,-55,-56,-80,100,-76,-77,-39,100,100,100,100,100,100,100,None,None,None,None,None,-67,-68,-69,-70,-71,-72,-81,-82,-37,100,-38,-73,100,100,100,100,-40,100,100,-74,100,100,100,100,-75,100,]),'lower_equal':([58,59,70,71,72,73,74,76,77,93,94,111,112,114,115,116,117,118,119,120,122,123,125,127,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,157,158,159,161,162,167,171,172,174,175,176,177,180,189,191,192,193,194,197,198,],[-78,101,-79,-83,-87,-88,-89,-90,-91,-57,-58,101,101,-52,101,-54,-55,-56,-80,101,-76,-77,-39,101,101,101,101,101,101,101,None,None,None,None,None,-67,-68,-69,-70,-71,-72,-81,-82,-37,101,-38,-73,101,101,101,101,-40,101,101,-74,101,101,101,101,-75,101,]),'larger_equal':([58,59,70,71,72,73,74,76,77,93,94,111,112,114,115,116,117,118,119,120,122,123,125,127,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,157,158,159,161,162,167,171,172,174,175,176,177,180,189,191,192,193,194,197,198,],[-78,102,-79,-83,-87,-88,-89,-90,-91,-57,-58,102,102,-52,102,-54,-55,-56,-80,102,-76,-77,-39,102,102,102,102,102,102,102,None,None,None,None,None,-67,-68,-69,-70,-71,-72,-81,-82,-37,102,-38,-73,102,102,102,102,-40,102,102,-74,102,102,102,102,-75,102,]),'plus':([58,59,70,71,72,73,74,76,77,93,94,111,112,114,115,116,117,118,119,120,122,123,125,127,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,157,158,159,161,162,167,171,172,174,175,176,177,180,189,191,192,193,194,197,198,],[-78,103,-79,-83,-87,-88,-89,-90,-91,-57,-58,103,103,-52,103,-54,-55,-56,-80,103,-76,-77,-39,103,103,103,103,103,103,103,103,103,103,103,103,-67,-68,-69,-70,-71,-72,-81,-82,-37,103,-38,-73,103,103,103,103,-40,103,103,-74,103,103,103,103,-75,103,]),'times':([58,59,70,71,72,73,74,76,77,93,94,111,112,114,115,116,117,118,119,120,122,123,125,127,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,157,158,159,161,162,167,171,172,174,175,176,177,180,189,191,192,193,194,197,198,],[-78,105,-79,-83,-87,-88,-89,-90,-91,-57,-58,105,105,-52,105,-54,-55,-56,-80,105,-76,-77,-39,105,105,105,105,105,105,105,105,105,105,105,105,105,105,-69,-70,-71,-72,-81,-82,-37,105,-38,-73,105,105,105,105,-40,105,105,-74,105,105,105,105,-75,105,]),'div':([58,59,70,71,72,73,74,76,77,93,94,111,112,114,115,116,117,118,119,120,122,123,125,127,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,157,158,159,161,162,167,171,172,174,175,176,177,180,189,191,192,193,194,197,198,],[-78,106,-79,-83,-87,-88,-89,-90,-91,-57,-58,106,106,-52,106,-54,-55,-56,-80,106,-76,-77,-39,106,106,106,106,106,106,106,106,106,106,106,106,106,106,-69,-70,-71,-72,-81,-82,-37,106,-38,-73,106,106,106,106,-40,106,106,-74,106,106,106,106,-75,106,]),'modulo':([58,59,70,71,72,73,74,76,77,93,94,111,112,114,115,116,117,118,119,120,122,123,125,127,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,157,158,159,161,162,167,171,172,174,175,176,177,180,189,191,192,193,194,197,198,],[-78,107,-79,-83,-87,-88,-89,-90,-91,-57,-58,107,107,-52,107,-54,-55,-56,-80,107,-76,-77,-39,107,107,107,107,107,107,107,107,107,107,107,107,107,107,-69,-70,-71,-72,-81,-82,-37,107,-38,-73,107,107,107,107,-40,107,107,-74,107,107,107,107,-75,107,]),'pow':([58,59,70,71,72,73,74,76,77,93,94,111,112,114,115,116,117,118,119,120,122,123,125,127,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,157,158,159,161,162,167,171,172,174,175,176,177,180,189,191,192,193,194,197,198,],[-78,108,-79,-83,-87,-88,-89,-90,-91,-57,-58,108,108,108,108,108,108,108,-80,108,-76,-77,-39,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,-81,-82,-37,108,-38,-73,108,108,108,108,-40,108,108,-74,108,108,108,108,-75,108,]),'dot':([58,59,70,71,72,73,74,76,77,93,94,111,112,114,115,116,117,118,119,120,122,123,125,127,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,157,158,159,161,162,167,171,172,174,175,176,177,180,189,191,192,193,194,197,198,],[-78,109,-79,-83,-87,-88,-89,-90,-91,-57,-58,109,109,109,109,109,109,109,-80,109,-76,-77,-39,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,170,-81,-82,-37,109,-38,-73,109,109,109,109,-40,109,109,-74,109,109,109,109,-75,109,]),'double_colon':([58,59,70,71,72,73,74,76,77,93,94,111,112,114,115,116,117,118,119,120,122,123,125,127,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,157,158,159,161,162,167,171,172,174,175,176,177,180,189,191,192,193,194,197,198,],[-78,110,-79,-83,-87,-88,-89,-90,-91,-57,-58,110,110,-52,-53,-54,-55,-56,-80,110,-76,-77,-39,110,110,-51,110,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-81,-82,-37,110,-38,-73,-44,-46,110,110,-40,110,110,-74,-45,-47,110,110,-75,-48,]),'then':([58,70,71,72,73,74,76,77,93,94,111,114,115,116,117,118,119,122,123,125,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,157,158,159,162,167,171,172,174,176,189,191,192,194,197,198,],[-78,-79,-83,-87,-88,-89,-90,-91,-57,-58,152,-52,-53,-54,-55,-56,-80,-76,-77,-39,-51,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-81,-82,-37,-38,-73,-44,-46,-49,-40,-74,-45,-47,-50,-75,-48,]),'do':([58,70,71,72,73,74,76,77,93,94,112,114,115,116,117,118,119,122,123,125,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,157,158,159,162,167,171,172,174,176,189,191,192,194,197,198,],[-78,-79,-83,-87,-88,-89,-90,-91,-57,-58,153,-52,-53,-54,-55,-56,-80,-76,-77,-39,-51,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-81,-82,-37,-38,-73,-44,-46,-49,-40,-74,-45,-47,-50,-75,-48,]),'else':([58,70,71,72,73,74,76,77,93,94,114,115,116,117,118,119,122,123,125,133,136,137,138,139,140,141,142,143,144,145,146,147,148,149,157,158,159,162,167,171,172,174,176,189,191,192,194,197,198,],[-78,-79,-83,-87,-88,-89,-90,-91,-57,-58,-52,-53,-54,-55,-56,-80,-76,-77,-39,-51,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-81,-82,-37,-38,-73,183,-46,-49,-40,-74,-45,-47,-50,-75,-48,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Program':([0,],[1,]),'Class':([0,1,],[2,6,]),'External_met':([0,1,],[3,7,]),'Class_body':([9,13,28,36,37,44,],[15,20,42,49,51,81,]),'Field':([15,20,42,49,51,81,],[25,25,25,25,25,25,]),'Method':([15,20,42,49,51,81,],[26,26,26,26,26,26,]),'Formals':([19,41,],[32,78,]),'Formal':([19,32,41,47,78,],[33,48,33,84,48,]),'Type':([38,45,83,154,163,164,],[52,82,131,173,178,179,]),'Expr':([40,60,61,63,64,65,66,67,68,75,89,90,91,95,96,97,98,99,100,101,102,103,104,105,106,107,108,124,152,153,155,156,160,168,169,183,184,185,186,190,196,],[59,111,112,114,115,116,117,118,120,127,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,161,171,172,174,175,177,180,135,191,192,193,194,135,198,]),'Literal':([40,60,61,63,64,65,66,67,68,75,89,90,91,95,96,97,98,99,100,101,102,103,104,105,106,107,108,124,152,153,155,156,160,168,169,183,184,185,186,190,196,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'Block':([40,60,61,63,64,65,66,67,68,75,89,90,91,95,96,97,98,99,100,101,102,103,104,105,106,107,108,124,152,153,155,156,160,168,169,178,179,183,184,185,186,190,196,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,187,188,71,71,71,71,71,71,]),'Boolean_literal':([40,60,61,63,64,65,66,67,68,75,89,90,91,95,96,97,98,99,100,101,102,103,104,105,106,107,108,124,152,153,155,156,160,168,169,183,184,185,186,190,196,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'Block_body':([75,],[124,]),'Args':([91,169,190,],[134,181,195,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Program","S'",1,None,None,None),
  ('Program -> Class','Program',1,'p_Program','myParserExt.py',49),
  ('Program -> Program Class','Program',2,'p_Program','myParserExt.py',50),
  ('Program -> External_met','Program',1,'p_Program_ext_met','myParserExt.py',59),
  ('Program -> Program External_met','Program',2,'p_Program_ext_met','myParserExt.py',60),
  ('Class_body -> <empty>','Class_body',0,'p_Class_body','myParserExt.py',69),
  ('Class_body -> Class_body Field','Class_body',2,'p_Class_body','myParserExt.py',70),
  ('Class_body -> Class_body Method','Class_body',2,'p_Class_body','myParserExt.py',71),
  ('Class -> class type_identifier lbrace Class_body rbrace','Class',5,'p_Class','myParserExt.py',82),
  ('Class -> class type_identifier extends type_identifier lbrace Class_body rbrace','Class',7,'p_Class','myParserExt.py',83),
  ('Class -> class type_identifier lbrace error rbrace','Class',5,'p_Class_error','myParserExt.py',99),
  ('Class -> class type_identifier extends type_identifier lbrace error rbrace','Class',7,'p_Class_error','myParserExt.py',100),
  ('Class -> class lbrace Class_body rbrace','Class',4,'p_Class_error_no_name','myParserExt.py',107),
  ('Class -> class extends type_identifier lbrace Class_body rbrace','Class',6,'p_Class_error_no_name','myParserExt.py',108),
  ('Class -> class object_identifier lbrace error rbrace','Class',5,'p_Class_error_object_id_name','myParserExt.py',117),
  ('Class -> class object_identifier extends type_identifier lbrace Class_body rbrace','Class',7,'p_Class_error_object_id_name','myParserExt.py',118),
  ('Class -> class type_identifier extends object_identifier lbrace Class_body rbrace','Class',7,'p_Class_error_object_id_name_parent','myParserExt.py',127),
  ('External_met -> external object_identifier lpar Formals rpar colon Type semicolon','External_met',8,'p_External_met','myParserExt.py',135),
  ('Field -> object_identifier colon Type semicolon','Field',4,'p_Field','myParserExt.py',141),
  ('Field -> object_identifier colon Type assign Expr semicolon','Field',6,'p_Field','myParserExt.py',142),
  ('Field -> object_identifier colon Type','Field',3,'p_Field_error_semicolon','myParserExt.py',153),
  ('Field -> object_identifier colon Type assign Expr','Field',5,'p_Field_error_semicolon','myParserExt.py',154),
  ('Field -> object_identifier semicolon','Field',2,'p_Field_error_type','myParserExt.py',168),
  ('Field -> object_identifier assign Expr semicolon','Field',4,'p_Field_error_type','myParserExt.py',169),
  ('Method -> object_identifier lpar Formals rpar colon Type Block','Method',7,'p_Method','myParserExt.py',182),
  ('Method -> object_identifier lpar error rpar colon Type Block','Method',7,'p_Method_error','myParserExt.py',188),
  ('Type -> type_identifier','Type',1,'p_Type','myParserExt.py',196),
  ('Type -> int32','Type',1,'p_Type','myParserExt.py',197),
  ('Type -> bool','Type',1,'p_Type','myParserExt.py',198),
  ('Type -> string','Type',1,'p_Type','myParserExt.py',199),
  ('Type -> unit','Type',1,'p_Type','myParserExt.py',200),
  ('Formals -> <empty>','Formals',0,'p_Formals','myParserExt.py',205),
  ('Formals -> Formal','Formals',1,'p_Formals','myParserExt.py',206),
  ('Formals -> Formals comma Formal','Formals',3,'p_Formals','myParserExt.py',207),
  ('Formals -> Formals Formal','Formals',2,'p_Formals_error_comma','myParserExt.py',222),
  ('Formal -> object_identifier colon Type','Formal',3,'p_Formal','myParserExt.py',230),
  ('Formal -> object_identifier','Formal',1,'p_Formals_error_type','myParserExt.py',236),
  ('Block -> lbrace Block_body rbrace','Block',3,'p_Block','myParserExt.py',244),
  ('Block -> lbrace error rbrace','Block',3,'p_Block_error','myParserExt.py',249),
  ('Block -> lbrace rbrace','Block',2,'p_Block_error_empty','myParserExt.py',258),
  ('Block -> lbrace Block_body semicolon rbrace','Block',4,'p_Block_error_end_semicolon','myParserExt.py',267),
  ('Block_body -> Expr','Block_body',1,'p_Block_body','myParserExt.py',274),
  ('Block_body -> Block_body semicolon Expr','Block_body',3,'p_Block_body','myParserExt.py',275),
  ('Block_body -> Block_body Expr','Block_body',2,'p_Block_body_error_expr_semicolon','myParserExt.py',287),
  ('Expr -> if Expr then Expr','Expr',4,'p_Expr_If_then','myParserExt.py',295),
  ('Expr -> if Expr then Expr else Expr','Expr',6,'p_Expr_If_then','myParserExt.py',296),
  ('Expr -> while Expr do Expr','Expr',4,'p_Expr_while','myParserExt.py',306),
  ('Expr -> let object_identifier colon Type in Expr','Expr',6,'p_Expr_let','myParserExt.py',311),
  ('Expr -> let object_identifier colon Type assign Expr in Expr','Expr',8,'p_Expr_let','myParserExt.py',312),
  ('Expr -> let object_identifier in Expr','Expr',4,'p_Expr_let_error_type','myParserExt.py',323),
  ('Expr -> let object_identifier assign Expr in Expr','Expr',6,'p_Expr_let_error_type','myParserExt.py',324),
  ('Expr -> object_identifier assign Expr','Expr',3,'p_Expr_assign','myParserExt.py',337),
  ('Expr -> minus Expr','Expr',2,'p_Expr_uminus','myParserExt.py',342),
  ('Expr -> not Expr','Expr',2,'p_Expr_UnOp','myParserExt.py',347),
  ('Expr -> isnull Expr','Expr',2,'p_Expr_UnOp','myParserExt.py',348),
  ('Expr -> plusplus Expr','Expr',2,'p_Expr_UnOp','myParserExt.py',349),
  ('Expr -> minusminus Expr','Expr',2,'p_Expr_UnOp','myParserExt.py',350),
  ('Expr -> Expr plusplus','Expr',2,'p_Expr_UnOp_ext','myParserExt.py',355),
  ('Expr -> Expr minusminus','Expr',2,'p_Expr_UnOp_ext','myParserExt.py',356),
  ('Expr -> Expr and Expr','Expr',3,'p_Expr_BinOp','myParserExt.py',362),
  ('Expr -> Expr or Expr','Expr',3,'p_Expr_BinOp','myParserExt.py',363),
  ('Expr -> Expr xor Expr','Expr',3,'p_Expr_BinOp','myParserExt.py',364),
  ('Expr -> Expr equal Expr','Expr',3,'p_Expr_BinOp','myParserExt.py',365),
  ('Expr -> Expr lower Expr','Expr',3,'p_Expr_BinOp','myParserExt.py',366),
  ('Expr -> Expr larger Expr','Expr',3,'p_Expr_BinOp','myParserExt.py',367),
  ('Expr -> Expr lower_equal Expr','Expr',3,'p_Expr_BinOp','myParserExt.py',368),
  ('Expr -> Expr larger_equal Expr','Expr',3,'p_Expr_BinOp','myParserExt.py',369),
  ('Expr -> Expr plus Expr','Expr',3,'p_Expr_BinOp','myParserExt.py',370),
  ('Expr -> Expr minus Expr','Expr',3,'p_Expr_BinOp','myParserExt.py',371),
  ('Expr -> Expr times Expr','Expr',3,'p_Expr_BinOp','myParserExt.py',372),
  ('Expr -> Expr div Expr','Expr',3,'p_Expr_BinOp','myParserExt.py',373),
  ('Expr -> Expr modulo Expr','Expr',3,'p_Expr_BinOp','myParserExt.py',374),
  ('Expr -> Expr pow Expr','Expr',3,'p_Expr_BinOp','myParserExt.py',375),
  ('Expr -> object_identifier lpar Args rpar','Expr',4,'p_Expr_Call','myParserExt.py',381),
  ('Expr -> Expr dot object_identifier lpar Args rpar','Expr',6,'p_Expr_Call','myParserExt.py',382),
  ('Expr -> Expr double_colon type_identifier dot object_identifier lpar Args rpar','Expr',8,'p_Expr_Call','myParserExt.py',383),
  ('Expr -> new type_identifier','Expr',2,'p_Expr_New','myParserExt.py',398),
  ('Expr -> new object_identifier','Expr',2,'p_Expr_New_error_obj_id','myParserExt.py',404),
  ('Expr -> object_identifier','Expr',1,'p_Expr_Object_id','myParserExt.py',412),
  ('Expr -> Literal','Expr',1,'p_Expr_literal','myParserExt.py',417),
  ('Expr -> lpar rpar','Expr',2,'p_Expr_Unit','myParserExt.py',422),
  ('Expr -> lpar Expr rpar','Expr',3,'p_Expr_Par_expr','myParserExt.py',427),
  ('Expr -> lpar error rpar','Expr',3,'p_Expr_Par_expr_error','myParserExt.py',433),
  ('Expr -> Block','Expr',1,'p_Expr_block','myParserExt.py',441),
  ('Args -> <empty>','Args',0,'p_Args','myParserExt.py',446),
  ('Args -> Expr','Args',1,'p_Args','myParserExt.py',447),
  ('Args -> Args comma Expr','Args',3,'p_Args','myParserExt.py',448),
  ('Literal -> integer_literal','Literal',1,'p_Literal','myParserExt.py',461),
  ('Literal -> string_literal','Literal',1,'p_Literal','myParserExt.py',462),
  ('Literal -> Boolean_literal','Literal',1,'p_Literal','myParserExt.py',463),
  ('Boolean_literal -> true','Boolean_literal',1,'p_Boolean_literal','myParserExt.py',471),
  ('Boolean_literal -> false','Boolean_literal',1,'p_Boolean_literal','myParserExt.py',472),
]
